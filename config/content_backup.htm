<h1>About</h1>
<p>網頁: <a class="Link--inTextBlock" href="https://mdecd2024.github.io/2a-midag7/">https://mdecd2024.github.io/2a-midag7/</a></p>
<p>網誌: <a href="https://mdecd2024.github.io/2a-midag7/blog">https://mdecd2024.github.io/2a-midag7/blog</a></p>
<p>簡報: <a href="https://mdecd2024.github.io/2a-midag7/reveal">https://mdecd2024.github.io/2a-midag7/reveal</a></p>
<p>倉儲: <a href="https://github.com/mdecd2024/2a-midag7">mdecd2024/2a-midag7: 2a-midag7 created by GitHub Classroom</a></p>
<p></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<h1>W3文章翻譯</h1>
<p>41123141 <a href="https://nfuedu-my.sharepoint.com/:w:/g/personal/41123141_nfu_edu_tw/EeJuv5iHppNJg9D9w_PMdiwBmmQIWKUVdaliidjl1Rltlg"><span>封面到羅馬文字</span><span>X</span></a></p>
<p>41123143 <a href="https://nfuedu-my.sharepoint.com/:w:/g/personal/41123143_nfu_edu_tw/EUxyOREdQJBMsB8GqsHf0lwBwzE7rJKdqcAZCF64EXwVoQ?e=cwk21N">p.1-11</a></p>
<p>41123144 <a href="https://nfuedu-my.sharepoint.com/personal/41123144_nfu_edu_tw/Documents/41123144%20-%20%E7%BF%BB%E8%AD%AF.pdf">P.12-22</a></p>
<p>41123153 <a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/41123153_nfu_edu_tw/EfWzvObMkiZErf219hfHheMBPjGNJwRI59ArcNSMBRlXuw">P.23-33</a></p>
<h1>各組員倉儲與靜態</h1>
<p><span>40923137 - ( </span><a href="https://github.com/fws40923137/cp2023">倉儲<span> </span></a><span>/</span><span> </span>網頁<span> )</span></p>
<p><span>41123141 - ( </span><a href="https://github.com/Jun41123/cd2024">倉儲<span> </span></a><span>/</span><span> </span><a href="https://jun41123.github.io/cd2024/">網頁</a><span> )</span></p>
<p>41123142 - ( <a href="https://github.com/Liaots/cd2024">倉儲 </a>/ <a href="https://liaots.github.io/cd2024/content/index.html">網頁</a> )</p>
<p><span>41123143 - (</span><span> <a href="https://github.com/41123143/cd2024">倉儲</a></span><a href="https://github.com/41123143/cd2024/tree/763fc591055b88f5a8382e649bacd6fb8419ed91"> </a><span>/</span><span> <a href="https://41123143.github.io/cd2024/content/index.html">網頁</a> </span><span>)</span></p>
<p><span>41123144 - (</span><span> </span><a href="https://github.com/41123144/cd2024">倉儲 </a><span>/</span><span> <a href="https://41123144.github.io/cd2024/content/index.html">網頁</a> </span><span>)</span></p>
<p><span>41123148 - ( <a href="https://github.com/iyuans/cd2024">倉儲 </a>/ <a href="https://iyuans.github.io/cd2024/content/index.html">網頁</a> )</span></p>
<p><span>41123153 - ( <a href="https://github.com/AJhen0526/cd2024">倉儲 </a>/ <a href="https://ajhen0526.github.io/cd2024/content/index.html">網頁</a> )</span></p>
<p><span>41123154 - ( <a href="https://github.com/EASON930420/cd2024">倉儲 </a>/ <a href="https://eason930420.github.io/cd2024/content/index.html">網頁</a> )</span></p>
<p><span></span></p>
<p><span></span></p>
<h1>W12 任務</h1>
<h2>零件三</h2>
<h2>零件四: 圓柱</h2>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41123141_nfu_edu_tw/EQiYOEP2f3ZEn1ew5LTw7EMBwZx4_NesAAIvNBxF0d680A">零件繪畫過程</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:i:/g/personal/41123141_nfu_edu_tw/EUTXTWekycFIjMXfIdBNOkQBAk1aJaBS7Ml1OTTflDuaTQ">零件完成圖</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:i:/g/personal/41123141_nfu_edu_tw/EeKTK5ZoPjFFrX86Bf454_EB94sKrXAs4hLHW9hb6MsLaQ">直徑表示</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:i:/g/personal/41123141_nfu_edu_tw/ESqDH0POV-RFmyDGEiSej9YBiIzhnZeFvGQmc-qUTYaoCQ">長度表示</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41123141_nfu_edu_tw/EQiYOEP2f3ZEn1ew5LTw7EMBwZx4_NesAAIvNBxF0d680A"></a></p>
<h1>W10 任務</h1>
<h2>任務三</h2>
<p></p>
<h2>任務二</h2>
<p>文章一  : <span>Construction and theoretical study of a ball balancing platform (構建一個球體平衡平台涉及到平台本身的物理結構建造以及用於維持球體平衡的控制算法的理論研究)</span></p>
<p><span>摘要內容 : </span><span>通過實施自動控制理論穩定動態系統時的局限性, </span><span>球平衡平臺的構造和理論研究, 通過實施穩定動態系統時的局限性自動控制理論. 通過物理構造的裝置作為理論的演示者, 進一步比較從牛頓力學得出的事實物理和計算機模擬結果. 為了能夠進行比較, 有必要設計一個能夠滿足系統要求的令人滿意的控制器. 在設備和控制方面, 為在平臺上平衡球的系統引入比例積分導數控制器. 進一步允許分析以確定穩定自然不穩定或半穩定系統時的局限性. 建立球體平衡平台的理論模型, 並與實際搭建的平台進行比較. 分析理論與實際結果之間的差異, 探討控制理論與系統實施的挑戰.</span></p>
<p><span></span></p>
<p><span>文章二 : A real time control system for balancing a ball on a platform with FPGA parallel implementation (用於在平臺上平衡球的即時控制系統，具有FPGA並行實現)</span></p>
<p><span>摘要內容 : </span>在一個FPGA晶元上開發了兩個並行PID控制器，用於獨立控制一個物件的兩個參數。確保了控制物件的PID控制器的輪廓計算的並行處理，調節器的輸出已經歸一化。通過自然類比，提高了在平台上調節球位置的精度。設計的控制器可用於即時控制具有許多受控參數的高速物體<span>。</span></p>
<p></p>
<p>文章三 : <span>Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach (基於狀態空間方法的雙軸平臺球位控制模擬與實驗研究)</span></p>
<p><span>摘要內容 : </span>本研究詳細設計並比較了三種控制結構，用於自動穩定球在板上的位置和球的軌跡跟蹤。即PD控制器、狀態空間反饋和狀態空間觀測器。所有三種方法都經過設計並進行了實際比較。所有結構都有一個共同的特徵。它是計算控制器參數的方法。通過牛頓方法推導的板上球數學模型和直流電機位置環路控制也是本文的一部分。</p>
<p></p>
<p>文章四：<span>Design and Implementation a Ball Balancing System for Control Theory Course（控制理論課程的球平衡系統設計與實現）</span></p>
<p><span>摘要內容：</span>開發一個球平衡系統，使用微控制器和相關控制演算法來保持球在橫樑上的平衡，以通過即時感官反饋調整橫樑的角度。在此過程中，製作了三個原型並相互比較，特別是在合理性和成本方面。通過集成一個伺服電機、一個距離感測器、一個微控制器板和一個機械平臺，可以很容易地設計整個系統。此外，他們將通過微控制器程式設計來理解和實現控制演算法。如果學生對MATLAB知之甚少。開發介面程式以在MATLAB中繪製即時位置曲線。這個簡化的系統將作為連接理論知識和實踐技能的橋樑。所提方法也適用於更複雜的系統<span>。</span></p>
<p><span></span></p>
<p><span>文章五: Ball on the plate balancing control system (板上球平衡控制系統)</span></p>
<p><span>摘要內容 : 平衡問題是一個持續的研究挑戰，適用於從教育到交通的許多興趣領域。二自由度球平衡實驗室試驗台是瞭解控制系統的重要設備。本文重點介紹了在板上平衡球的機械設計。使用電阻式觸摸屏獲取球體位置數據，使用步進電機和位置傳感器控制平台傾斜角度。 設計基於 AVR 微控制器的雙環下屬控制系統，使用 PID 控制器維持球體平衡。</span></p>
<p><span></span></p>
<p><span>文章六 : 2D Ball Balancer Control using QUARC (使用 QUARC 的 2D 球平衡器控制)</span></p>
<p><span>摘要內容 : 使用 QUARC 軟體設計和實現球體在二維平台上的位置控制。 設計 PD 和 PID 控制器，並探討設定點權重和積分器抗飽和等控制技術。 使用攝像頭讀取球體位置，並進行校準和轉換。</span></p>
<p></p>
<h2>任務1</h2>
<p><span>根據老師所給的 2a.txt 裡的['學號', 'Github 帳號', '組別'], 以下是利用 Python 寫的初步資料數列. </span></p>
<p><span></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import window, ajax
   
def fetch_csv_data():
  # CSV 檔案網址
  url = "https://mdecd2024.github.io/2bstud-2bsite/downloads/2b.txt"
   
  def on_complete(req):
    if req.status == 200 or req.status == 0:
      # 讀取 CSV 檔案內容
      content = req.text
   
      # 依照換行符號拆分資料
      lines = content.split('\n')
   
      # 建立空列表儲存資料
      data = []
   
      # 遍歷每一行資料
      for line in lines:
        # 忽略空白行
        if line.strip() == "":
          continue
   
        # 依照逗號拆分資料
        items = line.split(',')
   
        # 將拆分後的資料加入列表
        data.append(items)
   
      # 印出結果
      print(data)
    else:
      print("Error:", req.text)
   
  # 發送 AJAX 請求
  req = ajax.ajax()
  req.bind('complete', on_complete)
  req.open('GET', url, True)
  req.set_header('content-type', 'application/x-www-form-urlencoded')
  req.send()
   
# 呼叫函式讀取 CSV 資料
fetch_csv_data()</pre>
<p></p>
<p><span>只要透過 for 重複迴圈, 就可以從上列資料中每位學員的基本資料 (學號、Github 帳號與組別) 中直接在網頁建立所需的 html.</span></p>
<p><span>並列出-學員倉儲連結/學員網站連結/2a 分組倉儲連結 template: https://github.com/mdecd2024/2a-midag組別</span></p>
<p><span>下列程式碼是加上了生成 HTML 元素的程式碼，以及學員倉庫連結和網站連結的模板：</span></p>
<p><span></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import window, ajax, document, html
   
def fetch_csv_data():
  # CSV 檔案網址
  url = "https://mdecd2024.github.io/2astud-2asite/downloads/2a.txt"
   
  def on_complete(req):
    if req.status == 200 or req.status == 0:
      # 讀取 CSV 檔案內容
      content = req.text
   
      # 依照換行符號拆分資料
      lines = content.split('\n')
   
      # 建立空列表儲存資料
      data = []
   
      # 遍歷每一行資料
      for line in lines:
        # 忽略空白行
        if line.strip() == "":
          continue
   
        # 依照逗號拆分資料
        items = line.split(',')
   
        # 將拆分後的資料加入列表
        data.append(items)
   
      # 印出結果
      print(data)
       
      # 生成 HTML 元素
      generate_html(data)
    else:
      print("Error:", req.text)
   
  # 發送 AJAX 請求
  req = ajax.ajax()
  req.bind('complete', on_complete)
  req.open('GET', url, True)
  req.set_header('content-type', 'application/x-www-form-urlencoded')
  req.send()
   
# 生成 HTML 元素
def generate_html(data):
  brython_div = document["brython_div1"]
  course_title = "cd2024"
  for student_id, github_username, group in data:
    # 如果GitHub用戶名為空，將其設置為"000"
    github_username = github_username if github_username else "000"
    # 創建網址和倉庫的鏈接
    site_url = f"https://{github_username}.github.io/{course_title}"
    repo_url = f"https://github.com/{github_username}/{course_title}"
    group_repo_url = f"https://github.com/mdecd2024/2a-midag{group}"
    # 生成HTML元素並插入到div中
    brython_div &lt;= html.A(student_id, href=site_url) + " | " + \
                   html.A("GitHub Repo", href=repo_url) + " | " + \
                   html.A("Group Repo", href=group_repo_url) + html.BR()
   
# 呼叫函式讀取 CSV 資料
fetch_csv_data()</pre>
<p></p>
<p><span>這段程式碼會從 CSV 檔案中讀取學員的基本資料（學號、GitHub 帳號、組別），然後使用 </span><code>for</code><span> 迴圈生成 HTML 元素，並將這些元素插入到網頁中。你可以根據需要修改 </span><code>generate_html</code><span> 函式中的 HTML 元素結構，以符合你的需求。</span></p>
<h1>W4 影片字幕</h1>
<ul>
<li>影片填上字幕</li>
<li>上傳逐字稿.txt</li>
<li>心得摘要</li>
</ul>
<h2>41123141</h2>
<p>自評分數:68</p>
<p></p>
<p>1. 說明甲班第一組組長如何建立 midagi Team 13:24</p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/3lRG-1HJVP4" width="560"></iframe><span></span></p>
<p></p>
<p><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123141_nfu_edu_tw/EXlztrPfeFFMspWYalE9o4MB0Y5bn7zHDF_LFudUKQkjbA"> 說明甲班第一組組長如何建立 midagi Team之逐字稿</a></p>
<p><span></span></p>
<p>心得摘要: 利用 github Classroom 建立組別倉儲 ,如何利用 Codespaces 改版自己的倉儲 .</p>
<p>*  <span>用 Codespaces 開啟動態</span></p>
<p> 1. <span>chmod u+x init_replit</span></p>
<p> 2. <span>./init_replit</span></p>
<p> 3. python3 main.py</p>
<p>*   <span>用 Codespaces 開啟靜態</span></p>
<p><span> 1. python3 -m http.server</span></p>
<p><span>*   如何改版</span></p>
<p><span>1. git status</span></p>
<p><span>2. git add .</span></p>
<p><span>3. git commit -m "新增的的內容"</span></p>
<p><span>4. git push</span></p>
<p></p>
<p>   </p>
<p></p>
<p>2. 如何利用近端可攜系統維護分組網站<span> 14:18</span></p>
<p><span></span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/C7w9A1Xu3rg" width="560"></iframe></span></p>
<p><span> <a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123141_nfu_edu_tw/ETxQrGRoD6xCsGN-LCdcNUsBQNBzMI7otUy_dpQEz_JjSw">如何利用近端可攜系統維護分組網站逐字稿</a></span></p>
<p><span></span></p>
<p><span>心得摘要:</span></p>
<p><strong>利用代理主機的方式</strong><strong>, </strong><strong>先用</strong><strong>Puttygen </strong><strong>建立一把</strong><strong> key </strong><strong>然後把</strong><strong> key </strong><strong>存</strong><strong>( .ppk )</strong><strong>裡來</strong><strong>, </strong><strong>利用</strong><strong>Putty</strong><strong>把</strong><strong>key</strong><strong>導進去</strong><strong>, </strong><strong>進去</strong><strong> regedit </strong><strong>裡的</strong><strong> <span>HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\github.com </span></strong><strong>匯出成</strong><strong> reg</strong><strong>檔</strong><strong>, </strong><strong>如何用近端改版</strong></p>
<ul>
<li><strong>Cd tmp</strong></li>
<li><strong>Git clone – recurse-submodule <a href="mailto:git@github.com:mdecd2024/2a-midag1.git">git@github.com:mdecd2024/2a-midag1.git</a></strong></li>
<li><strong>Cd 2a-midag1</strong></li>
<li><strong>Cms(</strong><strong>會有一個獨立編輯的</strong><strong>9443</strong><strong>在</strong><strong> https)</strong></li>
</ul>
<p><strong>如果要推</strong></p>
<ul>
<li>Git add .</li>
<li>Git commit -m “自己要推的東西”</li>
<li>Git push</li>
</ul>
<p>讓這台短腦有權限推</p>
<ul>
<li>Ipconfig( ipv4 網址-因為每個人都有自己的 ipv4 )</li>
<li>跑到 tmp -組別-下的py</li>
<li>抓出來(把自己的 ipv4 環境導入)</li>
<li>在 <strong>Cms </strong><strong>一次</strong><strong>, </strong><strong>每個人都可以更新</strong></li>
</ul>
<h2>41123142</h2>
<p>設定Replit Github應用授權的說明影片2:44</p>
<p>影片:<a href="https://reccloud.com/tw/u/jw7bxyz">https://reccloud.com/tw/u/jw7bxyz</a></p>
<p>逐字稿:<a href="https://drive.google.com/file/d/1qbrSS6qTYldt--RfGP42r9AeL8a5inCM/view?usp=drive_link">https://drive.google.com/file/d/1qbrSS6qTYldt--RfGP42r9AeL8a5inCM/view?usp=drive_link</a></p>
<p></p>
<p>說明如何利用Replit對cd2024改版20:16</p>
<p>影片:<a href="https://reccloud.com/tw/u/e0mr8wr">https://reccloud.com/tw/u/e0mr8wr</a></p>
<p>逐字稿:<a href="https://drive.google.com/file/d/1YtrscSwhE7WdaAHfkzsl-YsJJnuY-QUP/view?usp=drive_link">https://drive.google.com/file/d/1YtrscSwhE7WdaAHfkzsl-YsJJnuY-QUP/view?usp=drive_link</a></p>
<p></p>
<p>使用Github維護個人網站10:21</p>
<p>影片:<a href="https://reccloud.com/tw/u/55k9sf3">https://reccloud.com/tw/u/55k9sf3</a></p>
<p>逐字稿:<a href="https://drive.google.com/file/d/1m9mJ_p5qS8vH4o-E8LtSfas7qGiFCeHJ/view?usp=drive_link">https://drive.google.com/file/d/1m9mJ_p5qS8vH4o-E8LtSfas7qGiFCeHJ/view?usp=drive_link</a></p>
<p></p>
<p>心得:<span>個人的cd2024倉儲以Github帳號登入Gitpod之後，就可以直接維護</span></p>
<h2>41123143</h2>
<p>自評:60</p>
<p>1.如何設定個人倉儲中的 Pelican 網誌 12:51</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/IGnBsPt-0wQ?si=7jOgJxAqDv7rO81s" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123143_nfu_edu_tw/EcYcKBSHLr1Pr1Ex_P5wRIEBZX0MmSmuxViLy5SaYjrifQ?e=giNllK">逐字稿1</a></p>
<p>設定網誌，名稱和slug不能重複</p>
<p></p>
<p></p>
<p>2.說明如何設定 Github 雙重認證  6:28</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/5Vy5rmStQ_E?si=6JrcgHQs6V1mRV_7" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123143_nfu_edu_tw/EeYg-AObEulCoeeTtYNPcTABtwwFmJfFBGkj1gV-76Y__A?e=t68moN">逐字稿2</a></p>
<p>為了在電腦上登入github，必須得通過雙重認證</p>
<p></p>
<p></p>
<p>3.如何將 41123130 的個人倉儲設為2a-miding?分組倉儲的子模組 12:11</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/8rfcbftNBig?si=WcVM4CjEgdsuKdX1" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123143_nfu_edu_tw/EXgKNNz0deZDjDAPxv6aYzYB5IpdU9E3MXHuatLRnzM7aQ?e=sNZEoZ">逐字稿3</a></p>
<p>將各組員倉儲設為分組網站的子模組，優點是比較好整合各組員繪製的零件</p>
<h2>41123144</h2>
<p><span>將組員的個人倉儲納入分組倉儲的子模組 <a href="https://www.youtube.com/watch?v=kHBhW2LA1yc">7:11</a></span></p>
<p><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123144_nfu_edu_tw/EeTnMPHmJ8NJghto_HhGUqgBnpu_PPNEzpV0zUStYyogEQ?e=RGBxXP">如何將組員的個人倉儲納入分組倉儲成為子模組.txt</a></p>
<p><span>如何在 replit 自設 ssh 維護分組倉儲 <a href="https://www.youtube.com/watch?v=_iVFqN6fF9g">27:46</a></span></p>
<p><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123144_nfu_edu_tw/ER-PHEuBhbtGtGzvOeTaX4sBTwRKkg2shSvs3IrvPeC47Q?e=TEVAoy">如何在 Replit 維護分組倉儲.txt</a></p>
<p>心得:如果同組人員同時使用 Replit 與 codespaces 維護網站,可能會造成雙方版本不一</p>
<h2>41123148</h2>
<p>w2 利用 codespaces 維護分組網站</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/TjAqISE-WEA" width="560"></iframe></p>
<p><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123148_nfu_edu_tw/EYm-REWgJ4ZOmOfNQ4VZqBIBOWa73maL_uSuMa94x-uk6g?e=GmxW0a">利用 codespaces 維護分組網站逐字稿</a></p>
<p></p>
<p>w3 如何利用 Gidpod 維護分組網站</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/-mukdrCXH5w" width="560"></iframe></p>
<p><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123148_nfu_edu_tw/ER7nsndxAXtHuyiJFY4rqo4BlJEkb-CN-2i6JDM-LapR-g?e=yDbdVR">如何利用 Gidpod 維護分組網站逐字稿</a></p>
<h2>41123153</h2>
<p>自評分數：60</p>
<p><span>利用分組協同建立 LaTeX 報告 25:01</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/QXz37veFG5c" width="560"></iframe></p>
<p><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123153_nfu_edu_tw/EZp9qAajksxFvYnElJc7j5YBb7GwyoXvsw1ewSiSMgvvCg?e=Z36c5g">利用分組協同建立 LaTeX 報告_逐字稿</a></p>
<p><span>簡介 Odoo PLM 用法 6:45</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/olBPkR7-PFI" width="560"></iframe></span></p>
<p><span><a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123153_nfu_edu_tw/EXc2K_J8DfhEhxLQ4uUWfWsB1jRKwQGykGHf6LufHvs8JA?e=fsfjAP">odoo plm簡介_逐字稿</a></span></p>
<p><span>心得：感謝老師仔細介紹給我們非常適合協同的網站，至於怎麼使用還有點陌生，以後會多多觀看老師影片努力學習</span></p>
<h1>OnShape</h1>
<h1>Replit</h1>
<p></p>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>